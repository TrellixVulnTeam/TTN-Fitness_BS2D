This software is an implementation of an algorithm for predicting insertion counts based on nucleotide patterns surrounfign TA dinulceotide sites using the Himar1 transposon
The input files are wig files containing the insertion counts at TA site coordinates in a bacterial genome. It generates an output of essentiality of genes based on comparing observed counts to expected counts

** STLM
** The model is trained on Insertion counts/LFCs of an exmaple dataset and generate the coefcients of the TTN in a linear model.
**similar sentence for testing (change name to prediction)

** Fitness estimation
** add sentence about how the model is used to categorize the genes passed in into the four categories. Specificify cirteria and categories. 







# TAInsertionPreferences

---- Train STLM model ----
python compute_LFCs.py <.fna file> <annotation .prot_table> <.wig file 1> <.wig file 2> <.wig file 3> ...<wig file n>  > <LFC file>
python3 LFCs_to_TTN.py <LFC file> > <TTN .csv>
python3 STLM_train.py <TTN .csv> <.pickle file to save to> #pickle file created wil tared


---- Test STLM model ---- 
[assuming you have a trained model in a pickle.tar.gz file format as well as a csv file of the TTN per site of the strain to predict]
python3 STLM_test.py <.pickle file without the tar.gz suffix> <train TTN .csv file> <test TTN .csv> > <output file to write the STLM predictions to> 


--- Fitness Estimation ----
transit gumbel <comma-separated .wig files> <annotation .prot_table or GFF3> <output file> 
python3 Fitness_Estimation.py <STLM output.csv> <annotation .prot_table> <output gumbel file> > <output file to save Gene Essentiality predictions>


==============================================================================================================================================
==============================================================================================================================================

------------- Getting expected counts of abscessus ATCC-19977 using our trained STLM -------------------
python compute_LFCs.py demodata/H37Rv/H37Rv.fna demodata/H37Rv/H37Rv.prot_table demodata/H37Rv/H37Rv_mean.wig > out/H37Rv_LFC.txt
python compute_LFCs.py demodata/H37Rv/H37Rv.fna demodata/H37Rv/H37Rv.prot_table demodata/H37Rv/*.wig > out/H37Rv_LFC.txt

python compute_LFCs.py demodata/abscessus/ATCC_19977/abscessus.fna demodata/abscessus/ATCC_1977/abscessus.prot_table demodata/abscessus/ATCC_19977/*.wig > out/abscessus_LFC.txt
python3 LFCs_to_TTN.py out/H37Rv_LFC.txt > out/H37Rv_TTN.csv
python3 LFCs_to_TTN.py out/abscessus_LFC.txt > out/abscessus_TTN.csv
python3 STLM_test.py demodata/H37Rv/STLM_model_trained_on_H37Rv.pickle out/H37Rv_TTN.csv out/abscessus_TTN.csv > out/abscessus_STLM_predictions.csv


--------- Retraining STLM on abscessus --------------------
python compute_LFCs.py demodata/abscessus/ATCC_19977/abscessus.fna demodata/abscessus/ATCC_1977/abscessus.prot_table demodata/abscessus/ATCC_19977/TnSeq-Ref-1.wig demodata/abscessus/ATCC_19977/TnSeq-Ref-2.wig demodata/abscessus/ATCC_19977/TnSeq-Ref-3.wig > out/abscessus_LFC.txt
python3 LFCs_to_TTN.py out/abscessus_LFC.txt > out/abscessus_TTN.csv
python3 STLM_train.py out/H37Rv_TTN.csv out/STLM_model_trained_on_abscessus.pickle 

--------- Estimating Fitness of genes in H37Rv (with HMM+NP) ----------------
transit gumbel <comma seperaated list of wig files in demodata/H37Rv> demodata/H37Rv/H37Rv.prot_table out/H37Rv_gumbel_gene_predictions.csv
python3 Fitness_Estimation.py out/STLM_H37Rv_predictions.csv demodata/STLM_model_trained_on_H37Rv.pickle demodata/H37Rv/H37Rv.prot_table out/H37Rv_gumbel_gene_predictions.csv > Fitness_Estimation_of_H37Rv_genes.csv



