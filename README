This software is an implementation of an algorithm for predicting insertion counts based on nucleotide patterns surrounfign TA dinulceotide sites using the Himar1 transposon
The input files are wig files containing the insertion counts at TA site coordinates in a bacterial genome. It generates an output of essentiality of genes based on comparing observed counts to expected counts

** Fitness estimation
** add sentence about how the model is used to categorize the genes passed in into the four categories. Specificify cirteria and categories. 
-> columns of output file. What do they mean? What is important in this. Sort by adjusted p-value, LFC, gene categories [metric -> Z-score, pvalue. Explain all that]

** add in purpose of the other pre-processing scripts(computeLFC and LFCtoTTN)
-> columns in the output files. 





####### RUNNING SCRIPTS ########################
---- Pre-Processing files ----
compute the LFCs from wig files and prot table 
>python compute_LFCs.py <.fna file> <annotation .prot_table> <.wig file 1> <.wig file 2> <.wig file 3> ...<wig file n>  > <LFC file>

create the tetra-nucleotide vectors at each TA site that will be used to train the STLM as well as used to calculate expected LFCs and expected counts at each TA site.
>python3 LFCs_to_TTN.py <LFC file> > <TTN .csv>

---- Train STLM ----
The STLM is a linear model trained on log-fold-changes (LFCs) of insertion counts of a sample dataset. It generates the coefficents for the tetra-nucleotides.
>python3 train_STLM.py <TTN .csv> <.pickle file to save to> #pickle file created wil tared


---- Predict using STLM ---- 
With a trained STLM, the expected count at each TA site accounting for surrounding nucleotides can be calculated for a given sample dataset.
>python3 predict_with_STLM.py <.pickle file without the tar.gz suffix> <train TTN .csv file> <test TTN .csv> > <output file to write the STLM predictions to> 


--- Fitness Estimation ----
The Gene+TTN model is a linear model that incorporates the expected counts at TA sites to estimate the fitness of genes. The genes are classified by their coefficients and significance in the following manner:
	- ES : Transit Gumbel labels it 'E'  
	- ESB : The gene is of N TA sites, such that N > log10(0.05)/log10(1-saturation)
	- NE : Gene+TTN Coef = 0 and FDR ADjusted Gene+TTN Pval < 0.05    OR    FDR Adjusted Pval > 0.05
	- GA : Gene+TTN Coef > 0 and FDR Adjusted Gene+TTN Pval < 0.05
	- GD : Gene+TTN Coef < 0 and FDR Adjusted Gene+TTN Pval < 0.05

The output file contains the columns:
	- ORF ID
	- ORF Name
	- ORF Description 
	- Total # of TA sites in the ORF
	- Number of TA sites in the ORF with insertions
	- Gene-Only Model(M0) Coeffients
	- Gene-Only Model (M0) Pvals (FDR-Adjusted)
	- Gene+TTN Model (M1) Coefficents
	- Gene+TTN Model (M1) Pvals (FDR-Adjusted)
	- Coefficient Difference in M1 and M0
	- Pval of the Coefficient Difference
	- Mean Predicted STLM Count -> Caution for genes that have multiple sites marked essential in initial pre-processing
	- Mean Actual Count
	- Gumbel Fitness Calls -> calls made from transit's gumbel run
	- TTN Fitness Calls -> calls made with the method in its entirity

>transit gumbel <comma-separated .wig files> <annotation .prot_table or GFF3> <output file> 
>python3 Fitness_Estimation.py <STLM output.csv> <annotation .prot_table> <output gumbel file> > <output file to save Gene Essentiality predictions>


===============================================================================
                             EXAMPLE WORKFLOW
===============================================================================

**per group of commands what are you doing? i.e pre-processing, training, etc. 



------------- Getting expected counts of abscessus ATCC-19977 using our trained STLM -------------------
** mention where the model is

>python compute_LFCs.py demodata/H37Rv/H37Rv.fna demodata/H37Rv/H37Rv.prot_table demodata/H37Rv/H37Rv_mean.wig > out/H37Rv_LFC.txt
>python compute_LFCs.py demodata/H37Rv/H37Rv.fna demodata/H37Rv/H37Rv.prot_table demodata/H37Rv/*.wig > out/H37Rv_LFC.txt

>python compute_LFCs.py demodata/abscessus/ATCC_19977/abscessus.fna demodata/abscessus/ATCC_1977/abscessus.prot_table demodata/abscessus/ATCC_19977/*.wig > out/abscessus_LFC.txt
>python3 LFCs_to_TTN.py out/H37Rv_LFC.txt > out/H37Rv_TTN.csv
>python3 LFCs_to_TTN.py out/abscessus_LFC.txt > out/abscessus_TTN.csv
>python3 predict_with_STLM.py demodata/H37Rv/STLM_model_trained_on_H37Rv.pickle out/H37Rv_TTN.csv out/abscessus_TTN.csv > out/abscessus_STLM_predictions.csv


--------- Retraining STLM on abscessus --------------------
** mention that if you want to train on new data

>python compute_LFCs.py demodata/abscessus/ATCC_19977/abscessus.fna demodata/abscessus/ATCC_1977/abscessus.prot_table demodata/abscessus/ATCC_19977/TnSeq-Ref-1.wig demodata/abscessus/ATCC_19977/TnSeq-Ref-2.wig demodata/abscessus/ATCC_19977/TnSeq-Ref-3.wig > out/abscessus_LFC.txt
>python3 LFCs_to_TTN.py out/abscessus_LFC.txt > out/abscessus_TTN.csv
>python3 train_STLM.py out/H37Rv_TTN.csv out/STLM_model_trained_on_abscessus.pickle 

--------- Estimating Fitness of genes in H37Rv (with HMM+NP) ----------------
>transit gumbel <comma seperaated list of wig files in demodata/H37Rv> demodata/H37Rv/H37Rv.prot_table out/H37Rv_gumbel_gene_predictions.csv
>python3 Fitness_Estimation.py out/STLM_H37Rv_predictions.csv demodata/STLM_model_trained_on_H37Rv.pickle demodata/H37Rv/H37Rv.prot_table out/H37Rv_gumbel_gene_predictions.csv > Fitness_Estimation_of_H37Rv_genes.csv



